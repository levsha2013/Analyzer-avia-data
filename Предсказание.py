import pandas as pd
import streamlit as st
import matplotlib.pyplot as plt
import seaborn as sns

from interpretation import get_interpretation
from ML import load_model_and_predict

st.set_page_config(
    page_title="Oh My App!",
    page_icon="./images/icon.png",
    layout="wide",
)


def started_page():
    intro_1, intro_2 = st.columns([0.8, 0.3])

    with intro_1:
        st.title('–û—Å—Ç–∞–Ω–µ—Ç—Å—è –ª–∏ –ø–∞—Å—Å–∞–∂–∏—Ä –¥–æ–≤–æ–ª–µ–Ω –ø–µ—Ä–µ–ª–µ—Ç–æ–º? ‚úàÔ∏è')
        st.write("### –î–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –æ –ø–∞—Å—Å–∞–∂–∏—Ä–µ:")
        st.write("*–î–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –≤–≤–æ–¥–∞ –º–æ–¥–µ–ª—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã.*")

    with intro_2:
        st.image('./images/flying.gif', output_format='gif', )


def print_features_values():
    col1, col2, col3 = st.columns(3)

    with col1:
        gender = st.radio('–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª –ø–∞—Å—Å–∞–∂–∏—Ä–∞: ', ('–ú—É–∂—Å–∫–æ–π üßë', '–ñ–µ–Ω—Å–∫–∏–πüëß'))
        loyal = st.radio('–õ–æ—è–ª–µ–Ω –ª–∏ –∫–ª–∏–µ–Ω—Ç –∞–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏–∏: ', ('–ö–ª–∏–µ–Ω—Ç –ª–æ—è–ª–µ–ΩüòÄ', '–ö–ª–∏–µ–Ω—Ç –Ω–µ –ª–æ—è–ª–µ–Ωüòí'))

    with col2:
        travel_type = st.radio('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–µ–∑–¥–∫–∏: ', ('–î–µ–ª–æ–≤–∞—èüëî', '–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—èüëï'))
        class_ = st.radio('–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è: ', ('–ë–∏–∑–Ω–µ—Åüí≤üí≤üí≤', '–≠–∫–æ–Ω–æ–º+üí≤üí≤', '–≠–∫–æ–Ω–æ–ºüí≤'))

    with col3:
        age = st.number_input("–í–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç –ø–∞—Å—Å–∞–∂–∏—Ä–∞ (—á–∏—Å–ª–æ –ø–æ–ª–Ω—ã—Ö –ª–µ—Ç)", step=1, value=25)
        distance = st.number_input("–£–∫–∞–∂–∏—Ç–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–ª–µ—Ç–∞ (–∫–º)", value=2000)

    return gender, loyal, travel_type, class_, age, distance


def get_features_to_df(gender, loyal, travel_type, class_, age, distance):
    # –ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ
    to_1 = ['–ú—É–∂—Å–∫–æ–π üßë', '–ö–ª–∏–µ–Ω—Ç –ª–æ—è–ª–µ–ΩüòÄ', '–î–µ–ª–æ–≤–∞—èüëî']
    dict_class = {
        '–ë–∏–∑–Ω–µ—Åüí≤üí≤üí≤': 2,
        '–≠–∫–æ–Ω–æ–º+üí≤üí≤': 1,
        '–≠–∫–æ–Ω–æ–ºüí≤': 0
    }
    gender = 1 if gender in to_1 else 0
    loyal = 1 if loyal in to_1 else 0
    travel_type = 1 if travel_type in to_1 else 0
    class_ = dict_class[class_]
    distance = distance * 0.621371      # –ø–µ—Ä–µ–≤–æ–¥ –≤ –º–∏–ª–∏

    # —Å–æ–∑–¥–∞–µ–º X_test
    X_test_x = pd.DataFrame([[gender, age, loyal, travel_type, class_, distance]])
    return X_test_x


def predict(X_test_x):
    predict = load_model_and_predict(X_test_x, path='./data/little_model_weights.mv')
    if predict == 'satisfied':
        result = 'success'
    else:
        result = 'unsuccess'
    return result

def interpretation_result():
    have_enought_data, features_importance, mean_check, mean_satisfaction = get_interpretation(*X_test.iloc[0])
    if have_enought_data:
        st.write(f"–ü—Ä–æ—Ü–µ–Ω—Ç –¥–æ–≤–æ–ª—å–Ω—ã—Ö –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –≤–≤–µ–¥–µ–Ω–Ω—ã–º –¥–∞–Ω–Ω—ã–º: {mean_satisfaction}%")

        st.write(f"–ù–∏–∂–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã —Å—Ä–µ–¥–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏ —Ç–∞–∫–∏—Ö –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤ –ø–æ –∞—Å–ø–µ–∫—Ç–∞–º –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π"
                 f"–ø—Ä–æ—Ü–µ–Ω—Ç –≤–ª–∏—è–Ω–∏—è –∞—Å–ø–µ–∫—Ç–∞ –Ω–∞ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç—å –ø–∞—Å—Å–∞–∂–∏—Ä–∞:")
        for index_x, value_x in zip(features_importance.index, features_importance):
            _, col_index, col_val = st.columns([0.1, 0.3, 0.8])
            with col_index: st.write(index_x)
            with col_val: st.write(f"{round(mean_check[index_x], 1)} -- ({round(value_x, 1)} %)")

    else:
        st.write("–û –ø–æ–¥–æ–±–Ω—ã—Ö –ø–∞—Å—Å–∞–∂–∏—Ä–∞—Ö —Å–ª–∏—à–∫–æ–º –º–∞–ª–æ –∏–∑–≤–µ—Å—Ç–Ω–æ, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –≤—ã–≤–æ–¥—ã.\n")
        st.write("–í –¥–∞–Ω–Ω—ã—Ö –ª–∏–±–æ –Ω–µ—Ç –ø–æ–¥–æ–±–Ω—ã—Ö –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤, –ª–∏–±–æ –µ—Å—Ç—å –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –ø–∞—Å—Å–∞–∂–∏—Ä")


if __name__ == "__main__":
    started_page()
    features = print_features_values()

    X_test = get_features_to_df(*features)

    # –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞–µ–º
    col_1, col_2, col_3, col_4 = st.columns([0.6, 0.01, 0.16, 0.35])

    img_col, interp_col = st.columns([0.6, 1.5])

    with col_3:
        go = st.button('–ü—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å')
        result = predict(X_test)

    result = 'dont_know'
    if go:
        predict = load_model_and_predict(X_test, path='./data/little_model_weights.mv')
        if predict == 'satisfied':
            result = 'success'
        else:
            result = 'unsuccess'

    with col_1:
        # –æ—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        # —É—Å–ø–µ—Ö
        if result == 'success':
            st.success('–ü–∞—Å—Å–∞–∂–∏—Ä –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –¥–æ–≤–æ–ª—å–Ω—ã–º!üòÑüëç')
            with img_col:
                st.image('./images/success.jpg', width=300, output_format='jpg')
            with interp_col:
                interpretation_result()
        # –Ω–µ–¥–æ–≤–æ–ª—å—Å—Ç–≤–æ
        elif result == 'unsuccess':
            st.warning("–ü–∞—Å—Å–∞–∂–∏—Ä –±—É–¥–µ—Ç –Ω–µ–¥–æ–≤–æ–ª–µ–Ω.üôÅüëé")
            with img_col:
                st.image('./images/unsuccess.png', width=350)
            with interp_col:
                interpretation_result()

        #
        elif result == 'dont_know':
            st.info('–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å" ü§∑‚Äç‚ôÇÔ∏èüëâ',)
            with img_col:
                st.image('./images/think_2.png', width=300)
            interp = False
